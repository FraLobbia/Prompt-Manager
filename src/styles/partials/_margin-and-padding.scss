// ---- Scala spacing ----
$spacers: (
  1: 0.25rem, // 4px
  2: 0.5rem,  // 8px
  3: 1rem,    // 16px
  4: 1.5rem,  // 24px
  5: 3rem     // 48px
);

// ---- Direzioni: abbreviazione -> propriet√† CSS ----
$dirs: (
  a: (),                    // all
  x: (left, right),         // asse X
  y: (top, bottom),         // asse Y
  t: (top),                 // top
  b: (bottom),              // bottom
  l: (left),                // left
  r: (right)                // right
);

// Helper per leggere la scala
@function spacer($key) {
  @return map-get($spacers, $key);
}

// Mixin generico: margin/padding + direzione/i + valore
@mixin space($type, $dirAbbr, $size) {
  $prop: if($type == 'm', margin, padding);
  $sides: map-get($dirs, $dirAbbr);

  // 'a' = tutti i lati
  @if length($sides) == 0 {
    #{$prop}: spacer($size);
  } @else {
    @each $side in $sides {
      #{$prop}-#{$side}: spacer($size);
    }
  }
}

// ---- Generazione classi tipo Bootstrap ----
// m = margin, p = padding
// Output desiderato:
//  .m-1 (tutti i lati) invece di .ma-1
//  .mx-2 (asse X), .my-2 (asse Y), .mt-3 (top) etc.
@each $abbr, $prop in (m: margin, p: padding) {
  // a,t,b,l,r,x,y
  @each $dirAbbr, $sides in $dirs {
    @each $sizeKey, $value in $spacers {
      @if $dirAbbr == a {
        // Caso tutti i lati: classe abbreviata .m-<n> / .p-<n>
        .#{$abbr}-#{$sizeKey} {
          @include space($abbr, $dirAbbr, $sizeKey);
        }
      } @else {
        .#{$abbr}#{$dirAbbr}-#{$sizeKey} {
          @include space($abbr, $dirAbbr, $sizeKey);
        }
      }
    }
  }
}
